# Funnel.md 編輯指南

## 文件定位

這是一份**教學導向**的技術文件，記錄使用 Tailscale Funnel + Docker 實現開發/正式環境快速切換的完整設定流程。

### 目標讀者
- **Mid-level 軟體開發人員**
- **不一定有 Linux 背景**
- 熟悉基本 Docker 操作
- 想快速上手，不想深入研究底層技術細節

### 文件特色
- 這是作者實際踩過坑後的經驗總結
- 重視實用性勝過理論完整性
- 每個步驟都可以直接複製貼上執行

---

## 寫作風格原則

### ✅ 應該做的

1. **使用友善的口吻**
   - 用「你」稱呼讀者
   - 用情境化的標題（例如：「早上開始開發」）
   - 加入適當的 emoji 讓文件更生動

2. **循序漸進的步驟**
   - 每個步驟都清楚標號
   - 說明「為什麼」需要這個步驟
   - 提供「如何確認」步驟成功的方法

3. **視覺化呈現**
   - 使用 Mermaid 流程圖展示架構
   - 重要資訊用表格整理
   - 用引用區塊標示重點提示

4. **實際範例**
   - 使用具體的範例值（ld-linebot, yushu-nb 等）
   - 在範例旁註明「← 改成你的xxx」
   - 提供預期的輸出結果

5. **跨平台支援**
   - 區分 Windows / Linux / Mac 的差異
   - 提供不同平台的指令範例
   - 說明路徑格式差異

### ❌ 應該避免的

1. **Linux 專有術語**
   - ❌ 不要用 `chmod`, `chown`, `sudo` 等指令（除非絕對必要）
   - ❌ 不要假設讀者了解 Unix 權限系統
   - ❌ 不要使用 `netstat`, `iptables` 等進階工具
   - ✅ 改用 Docker 原生指令或 Tailscale 提供的指令

2. **過度技術化的解釋**
   - ❌ 不要深入解釋 VPN 協定
   - ❌ 不要討論容器網路的底層實作
   - ❌ 不要展開討論安全性細節
   - ✅ 簡單說明用途，標示「保持不變」即可

3. **假設太多前置知識**
   - ❌ 不要假設讀者知道什麼是 network namespace
   - ❌ 不要假設讀者理解 capabilities
   - ✅ 用白話說明實際效果即可

4. **空泛的鼓勵或廢話**
   - ❌ 不要寫「很簡單」、「輕鬆完成」這類主觀評價
   - ❌ 不要過度使用鼓勵性語句
   - ✅ 直接提供解決方案和檢查方法

---

## 技術細節約定

### 容器名稱和埠號
- **範例容器名稱**: `ld-linebot-tailscale`, `ld-linebot-socat`
- **範例節點名稱**: `ld-linebot` (Tailscale 容器), `yushu-nb` (開發機)
- **範例 Tailnet**: `taile410e3.ts.net`
- **預設埠號**: 5001 (Funnel/Socat), 5002 (開發機應用程式)

### Docker 指令格式
- 使用**單行格式**（不用 `\` 換行）
- Windows 和 Linux/Mac 分開列出（因為路徑格式不同）
- 參數順序：基本設定 → 環境變數 → 掛載 → 網路 → capabilities → 重啟策略 → entrypoint

### start.sh 腳本
```bash
#!/bin/sh
tailscaled & 
sleep 2 
tailscale funnel 5001
```
- 使用 `--entrypoint=/bin/sh ... -c /var/lib/tailscale/start.sh` 執行
- **不需要** `chmod +x`（已用 sh -c 避開權限問題）

### 網路架構
- 使用 `--network=container:ld-linebot-tailscale` 共用網路
- Socat 和應用程式容器與 Tailscale 容器共用網路命名空間
- 所有服務監聽 `localhost:5001` 即可被 Funnel 存取

---

## 文件結構

### 必要章節（依序）
1. **前置需求** - Tailscale 帳號、Docker、開發機安裝 Tailscale
2. **運作原理** - Mermaid 架構圖、容器說明
3. **如何切換開發/正式環境** - 兩種情境的流程圖
4. **為什麼要用這個方案** - 省錢省時間、開發方便、切換簡單
5. **開始建立容器** - 分步驟教學（start.sh → 認證金鑰 → Tailscale 容器 → Socat 容器）
6. **日常使用** - 開發模式、正式環境模式的實際操作
7. **重要提醒** - 埠號衝突、`--network=container` 說明、應用程式監聽位址
8. **設定完成檢查清單** - 提供驗證指令和預期輸出
9. **遇到問題怎麼辦** - 常見問題和解決方法
10. **更多資源** - 相關連結

### 圖表使用
- **Mermaid 流程圖**: 架構圖、切換流程、埠號關係
- **表格**: 名稱對照、可否自訂
- **程式碼區塊**: 指令、腳本、輸出範例

---

## 常見修改情境

### 新增疑難排解項目
```markdown
### 問題 X: [簡短描述]

**症狀**: [使用者看到的現象]

**檢查步驟**:
[bash]
# 步驟 1: [說明]
docker xxx

# 步驟 2: [說明]
docker yyy
[/bash]

**常見原因**:
- ❌ [原因 1]
- ❌ [原因 2]
```

### 修改預設埠號
如果要改變預設埠號（例如從 5001 改成 8080），需要同步修改：
1. start.sh 中的 `tailscale funnel 5001`
2. Socat 容器的 `tcp-listen:5001`
3. 所有文件中提到 5001 的地方
4. 流程圖中的埠號標示

### 新增平台特定說明
- 如果是所有平台通用：直接寫在主要內容
- 如果是平台特定：用「**Windows**:」、「**Linux/Mac**:」區分

---

## 品質檢查清單

編輯完成後，確認：

- [ ] 所有指令都是單行格式（沒有 `\` 換行）
- [ ] 有區分 Windows / Linux / Mac 的路徑差異
- [ ] 範例值旁邊都有「← 改成你的xxx」註解
- [ ] 沒有使用 Linux 專有指令（chmod, netstat 等）
- [ ] 所有容器名稱、節點名稱一致
- [ ] Mermaid 圖表語法正確
- [ ] 避免「很簡單」、「輕鬆」等主觀詞彙
- [ ] 每個步驟都有「執行後確認」或預期輸出

---

## 背景脈絡

### 為什麼會有這份文件？
作者在設定 Tailscale Funnel + Docker 時踩了很多坑，包括：
- start.sh 權限問題（已用 `sh -c` 解決）
- `--network=container` 概念不清楚
- 不知道哪些參數可以改、哪些不能改
- Windows 路徑在容器內的對應

### 核心價值
這份文件的價值在於：
1. **實戰經驗** - 不是照抄官方文件，而是實際踩坑後的總結
2. **降低門檻** - 讓不熟 Linux 的開發者也能順利設定
3. **快速上手** - 複製貼上就能用，不需要研究底層

### 維護原則
- 保持教學導向，不要變成技術規格文件
- 新增內容時優先考慮「讀者會卡在哪裡」
- 避免為了完整性而增加複雜度

